template: true   # required for local templates
valuesFilePath: ./values.yml

resources: # resources needed for this pipeline
  - name: GitRepo_res  # SCM integration
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.myRepo.gitProvider }} # SCM integration where the repository is located
      path: {{ .Values.myRepo.path }} # Repository path, including org name/repo name
      branches:
        include: main  # Specifies which branches will trigger dependent steps

  - name: incoming_webhook_RB_signed_res  # webhook integration, when ever RB is signed
    type: IncomingWebhook
    configuration:
      webhookName: incoming_webhook_RB_signed

  - name: propertyBag_res # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      rb_info_restq: ""
      auth_key: ""

  - name: propertyBag_spec # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      version_spec: ""



pipelines: # pipeline definition

  - name: incoming_webhook_RBS_pipe
    steps:
      - name: Get_ReleaseBundle_Properties
        type: Bash
        configuration:
          inputResources:
            - name: incoming_webhook_RB_signed_res
          outputResources:
            - name: propertyBag_res
          integrations:
           - name: global_arti

           
        execution:
            onExecute:
              # get RB data from webhook
              - echo "$res_incoming_webhook_RB_signed_res_payload" | jq '.' > payload.json 
              - rb_name=$(read_json payload.json 'data.release_bundle_name') # extract RB name
              - rb_ver=$(read_json payload.json 'data.release_bundle_version') # extract RB version
              - artiserver=$(read_json payload.json 'jpd_origin') # get srtifactory server details 
              # parse REST command to get RB spec
              - rest_get="${artiserver}/distribution/api/v1/release_bundle/${rb_name}/${rb_ver}"
              # parse auth detailes
              - rest_auth="${int_global_arti_user}:${int_global_arti_apikey}"
              # wrtie to propery bag for next pipe step  
              - write_output propertyBag_res rb_info_restq=${rest_get}
              - write_output propertyBag_res auth_key=${rest_auth}
                       
      - name: Get_Version_Spec
        type: Bash
        configuration:
          inputSteps:
          - name: get_rb_path
          inputResources:
          - name: propertyBag_res
          - name: GitRepo_res
          outputResources:
          - name: propertyBag_spec
          integrations:
          - name: global_arti
          
        execution:
          onExecute:
            - res_path="${res_GitRepo_res_resourcePath}"
            - echo $res_path
            - cd $res_GitRepo_res_resourcePath
            
            # get ret cmd & auth from bag
            - rest_get="${res_propertyBag_res_rb_info_restq}"
            - rest_auth="${res_propertyBag_res_auth_key}"
            - echo $rb_info_restq
            - echo $rest_auth

            #- curl -u $rest_auth "$rest_get"
            - curl -u $rest_auth "$rest_get" | jq '.' > bundle.json
            #- curl -u $rest_auth "$rest_get" | jq '.' > bundle.json | cat
            
            # get RB spev via REST
            - curl -u $rest_auth "$rest_get" | jq '.' | cat
            
            #- jfrog rt docker-pull my-docker-registry.io/my-docker-image:latest docker-local 

            # install npm 14 on node machine
            - sudo chmod 1777 /tmp
            - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            - source ~/.nvm/nvm.sh
            - source ~/.bashrc
            - nvm install 14
            - nvm use 14
            - node -v
            #- sudo apt install npm
            - npm install
            # parse spec to get docker name & tag
                      
            - node ./app1.js
            #- node ./app1.js >> spec.txt
            #- write_output propertyBag_spec version_spec=${spec.txt}

      - name: docker
        type: Bash
        configuration:
          inputSteps:
            - name: get_bundle_info
          inputResources:
            - name: propertyBag_spec
          integrations:
            - name: global_arti
            - name: Arteplus
        execution:
          onStart:
            - docker images
            - docker login --username $int_global_arti_user --password $int_global_arti_apikey $int_global_arti_url
            - docker pull rtest1.jfrog.io/test-docker/busybox:1.34.0
            - docker pull rtest1.jfrog.io/test-docker/busybox:1.33.0
            - docker images
            - docker save rtest1.jfrog.io/test-docker/busybox:1.34.0 -o busybox1340.tar.gz 
            - docker save rtest1.jfrog.io/test-docker/busybox:1.33.0 -o busybox1330.tar.gz 
            #- docker save rtest1.jfrog.io/test-docker/busybox:1.34.0 -o busybox1340.tar.gz | gzip > version.tar.gz
            #- docker save rtest1.jfrog.io/test-docker/busybox:1.33.0 -o busybox1330.tar.gz | gzip > version.tar.gz
            #- docker save rtest1.jfrog.io/test-docker/busybox:1.33.0 -o | gzip > version2.tar.gz

            - ls -lah
            
            - tar -czvf version.tgz *.tar.gz
            - ls -lah
            - tar -ztvf version.tar.gz
            # - tar -ztvf version2.tar.gz
            - tar -tvf busybox1340.tar.gz



            #- aws s3 mb s3://mybucket
            #- aws s3 cp busybox1340.tar.gz S3://busybox1340.tar.gz
            #- aws s3 ls s3://Arteplus
            # | gzip > myimage_latest.tar.gz
            
            #- node ./app1.js >> tofile.txt
            #- echo "hello world" >> uploadme.txt 
            #- aws s3 cp uploadme.txt s3://testS3/uploadme.txt
            #- aws s3 ls s3://testS3/

            #- cat tofile.txt
            #- while read in; do chmod 755 "$in"; done < tofile.txt



            # 1. create bash - done
            # q. docker login -  yarden will check
            # 2. install aws cli, aws configure (with S3 res) - yarden will check
            # 3. copy to bucket - aws s3 cp 
            #aws s3 cp 81b0f486a199e649e1c911500274f8795c4e4028 s3://yardeng-bucket-europe/artifactory/filestore/81/



            #- curl -u $rest_auth "$rest_get" | jq '.' > tmp1
            #- curl -u $rest_auth "$rest_get" | jq '.' | cat
            #- curl -u $rest_auth "$rest_get" | jq '.' | cat > tmp1
            #- echo $tmp1
            #- curl -u $rest_auth "$rest_get" | jq '.docker|.repoName' > tmp2
            #- curl -u $rest_auth "$rest_get" | jq '.docker|.repoName' | cat
            #- echo $stmp2
            
            


           # - path="${res_GitRepo_res_path}"
           # - echo $path
           # - res_path="${res_GitRepo_res_resourcePath}"
           # - echo $res_path

 #     - name: step_fs_test
 #       type: bash
 #       configuration:
 #         inputSteps:
 #           - name: get_bundle_info
 #         inputResources:
 #           - name: FileSpec_res
 #           
 #       execution:
 #         onExecute:
 #           - fs_path="${res_FileSpec_res_resourcePath}"

#    onExecute:
#      - cd $res_src_resourcePath
#      - npm install
#     - mkdir -p testresults && mkdir -p codecoverage
#     - $res_src_resourceP
#
