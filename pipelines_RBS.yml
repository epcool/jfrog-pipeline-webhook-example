template: true   # required for local templates
valuesFilePath: ./values.yml

resources:
  - name: GitRepo_res
    type: GitRepo
    configuration:
      # SCM integration where the repository is located
      gitProvider: {{ .Values.myRepo.gitProvider }} # this will be replaced from values.yml
      # Repository path, including org name/repo name
      path: {{ .Values.myRepo.path }} # this will be replaced from values.yml
      branches:
        # Specifies which branches will trigger dependent steps
        include: master

  - name: incoming_webhook_RB_signed_res
    type: IncomingWebhook
    configuration:
      webhookName: incoming_webhook_RB_signed

  - name: propertyBag_res
    type: PropertyBag
    configuration:
      rb_info_restq: ""
      auth_key: ""

 # - name: FileSpec_res
 #   type: FileSpec
 #   configuration:
 #     sourceArtifactory: global_arti
 #     target: 'C:\Jfrogcli'
 #     aql:   
 #       "'files':[
 #           {
 #             'aql': {
 #               'items.find': {
 #                 'release_artifact.release.name': 'demo-delete',
 #                 'release_artifact.release.version': '1.31'
 #               }
 #             }
 #           }
 #         ]"

pipelines:

  - name: incoming_webhook_RBS_pipe
    steps:
      - name: get_rb_path
        type: Bash
        configuration:
          inputResources:
            - name: incoming_webhook_RB_signed_res
          outputResources:
            - name: propertyBag_res
          integrations:
           - name: global_arti
           
        execution:
            onExecute:
              - echo "$res_incoming_webhook_RB_signed_res_payload" | jq '.' > payload.json
              - rb_name=$(read_json payload.json 'data.release_bundle_name')
              #- echo $rb_name
              - rb_ver=$(read_json payload.json 'data.release_bundle_version')
              #- echo $rb_ver
              - downloadfile="release-bundles/${rb_name}/${rb_ver}"
              #- echo $downloadfile
              - artiserver=$(read_json payload.json 'jpd_origin')  
              #- echo $artiserver
              - rest_get="${artiserver}/distribution/api/v1/release_bundle/${rb_name}/${rb_ver}"
              #- echo $rest_get
              - rest_auth="${int_global_arti_user}:${int_global_arti_apikey}"
              - echo $rest_auth  
              - write_output propertyBag_res rb_info_restq=${rest_get}
              - write_output propertyBag_res auth_key=${rest_auth}
                       
      - name: get_bundle_info
        type: Bash
        configuration:
          inputResources:
          - name: propertyBag_res
          - name: GitRepo_res
          
        execution:
          onExecute:
            - rest_get="${res_propertyBag_res_rb_info_restq}"
            - rest_auth="${res_propertyBag_res_auth_key}"
            - echo $rb_info_restq
            - echo $rest_auth

            - curl -u $rest_auth "$rest_get"
            - curl -u $rest_auth "$rest_get" | jq '.' > bundle.json
            - curl -u $rest_auth "$rest_get" | jq '.docker.repoName' > stderr
            - echo $stderr
            - curl -u $rest_auth "$rest_get" | jq '.docker.repoName'
            


            - path="${res_GitRepo_res_path}"
            - echo $path
            - res_path="${res_GitRepo_res_resourcePath}"
            - echo $res_path
 #           - cd $res_path
 #           - npm install

            #- cp bundle.json 
            #- npm run app.js
 #     - name: step_fs_test
 #       type: bash
 #       configuration:
 #         inputSteps:
 #           - name: get_bundle_info
 #         inputResources:
 #           - name: FileSpec_res
 #           
 #       execution:
 #         onExecute:
 #           - fs_path="${res_FileSpec_res_resourcePath}"

#    onExecute:
#      - cd $res_src_resourcePath
#      - npm install
#     - mkdir -p testresults && mkdir -p codecoverage
#     - $res_src_resourceP
#
