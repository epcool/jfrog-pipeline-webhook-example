template: true   # required for local templates
valuesFilePath: ./values.yml

resources: # resources needed for this pipeline
  - name: GitRepo_res  # SCM integration
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.myRepo.gitProvider }} # SCM integration where the repository is located
      path: {{ .Values.myRepo.path }} # Repository path, including org name/repo name
      branches:
        include: main  # Specifies which branches will trigger dependent steps

  - name: incoming_webhook_RB_signed_res  # webhook integration, when ever RB is signed
    type: IncomingWebhook
    configuration:
      webhookName: incoming_webhook_RB_signed

  - name: propertyBag_res # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      rb_info_restq: ""
      auth_key: ""

  - name: propertyBag_version # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      version_name: ""


pipelines: # pipeline definition

  - name: incoming_webhook_RBS_pipe
    steps:
      - name: Get_ReleaseBundle_Properties
        type: Bash
        configuration:
          inputResources:
            - name: incoming_webhook_RB_signed_res
          outputResources:
            - name: propertyBag_version
            - name: propertyBag_res
          integrations:
           - name: global_arti
           
        execution:
            onExecute:
              # get RB data from webhook
              - echo "$res_incoming_webhook_RB_signed_res_payload" | jq '.' > payload.json 
              - rb_name=$(read_json payload.json 'data.release_bundle_name') # extract RB name
              - rb_ver=$(read_json payload.json 'data.release_bundle_version') # extract RB version
              - artiserver=$(read_json payload.json 'jpd_origin') # get srtifactory server details 
              # parse REST command to get RB spec
              - rest_get="${artiserver}/distribution/api/v1/release_bundle/${rb_name}/${rb_ver}"
              # parse auth detailes
              - rest_auth="${int_global_arti_user}:${int_global_arti_apikey}"
              # wrtie to propery bag for next pipe step  
              - write_output propertyBag_res rb_info_restq=${rest_get}
              - write_output propertyBag_res auth_key=${rest_auth}

              - tmp="${rb_name}_${rb_ver}"  
                    
              #- tr '.' '_' <<<"$tmp" > $ver_name
              #- tr '.' '_' <<<"$tmp" | $ver_name
               - ver_name <<< tr '.' '_' <<<"$tmp" 
              #- ver_name="${tmp}"
              - echo $tmp
              - echo $ver_name
              #- ver_name="${rb_name}"
              - write_output propertyBag_version version_name=${ver_name}  
                       
      - name: Get_Version_Spec
        type: Bash
        configuration:
          #inputSteps:
          #- name: Get_ReleaseBundle_Properties
          inputResources:
          - name: propertyBag_res
          #- name: GitRepo_res
          integrations:
          - name: global_arti
          
        execution:
          onExecute:
            #- res_path="${res_GitRepo_res_resourcePath}"
            #- echo $res_path
            #- cd $res_GitRepo_res_resourcePath
            
            # get ret cmd & auth from bag
            - rest_get="${res_propertyBag_res_rb_info_restq}"
            - rest_auth="${res_propertyBag_res_auth_key}"
            #- echo $rb_info_restq
            #- echo $rest_auth
            
            # get RB spev via REST
            - curl -u $rest_auth "$rest_get" | jq '.' > bundle.json
            - curl -u $rest_auth "$rest_get" | jq '.' | cat
            
            - ls -lah
            - add_run_files bundle.json my_file
            
      - name: Download_Version_As_Zip
        type: Bash
        configuration:
          inputSteps:
            - name: Get_Version_Spec
          inputResources:
            - name: GitRepo_res
            - name: propertyBag_version
          integrations:
            - name: global_arti
            - name: Arteplus
        execution:
          onStart:
            # github path to get app script
            - res_path="${res_GitRepo_res_resourcePath}"
            - echo $res_path
            - cd $res_GitRepo_res_resourcePath

            - restore_run_files my_file bundle.json
            # install npm 14 on node machine
            - sudo chmod 1777 /tmp
            - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            - source ~/.nvm/nvm.sh
            - source ~/.bashrc
            - nvm install 14
            - nvm use 14
            - node -v
            #- sudo apt install npm
            - npm install
            # parse spec to get docker name & tag
            - node ./app.js
            - node ./app.js >> spec.txt

            - docker images
            - docker login --username $int_global_arti_user --password $int_global_arti_apikey $int_global_arti_url
            - cat spec.txt
            - while read in; do ${in} ; done < spec.txt
            - ls -lah
            #- tar -czvf version.tgz *.tar.gz

            - ver_name="${res_propertyBag_version_version_name}.tgz"
            - echo $ver_name
            - tar -czvf ${ver_name} *.tar
 
            #- tar -czvf "version".tgz *.tar
            - ls -lah
            - tar -ztvf ${ver_name}


            #- tar -ztvf version.tgz



            #- aws s3 mb s3://mybucket
            #- aws s3 cp busybox1340.tar.gz S3://busybox1340.tar.gz
            #- aws s3 ls s3://Arteplus
            # | gzip > myimage_latest.tar.gz
            
            #- node ./app1.js >> tofile.txt
            #- echo "hello world" >> uploadme.txt 
            #- aws s3 cp uploadme.txt s3://testS3/uploadme.txt
            #- aws s3 ls s3://testS3/
