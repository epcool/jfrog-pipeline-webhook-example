template: true   # required for local templates
valuesFilePath: ./values.yml

resources: # resources needed for this pipeline
  - name: GitRepo_res  # SCM integration
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.myRepo.gitProvider }} # SCM integration where the repository is located
      path: {{ .Values.myRepo.path }} # Repository path, including org name/repo name
      branches:
        include: main  # Specifies which branches will trigger dependent steps

  - name: incoming_webhook_RB_signed_res  # webhook integration, when ever RB is signed
    type: IncomingWebhook
    configuration:
      webhookName: incoming_webhook_RB_signed

  - name: propertyBag_res # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      rb_info_restq: ""
      auth_key: ""

 # - name: FileSpec_res
 #   type: FileSpec
 #   configuration:
 #     sourceArtifactory: global_arti
 #     target: 'C:\Jfrogcli'
 #     aql:   
 #       "'files':[
 #           {
 #             'aql': {
 #               'items.find': {
 #                 'release_artifact.release.name': 'demo-delete',
 #                 'release_artifact.release.version': '1.31'
 #               }
 #             }
 #           }
 #         ]"

pipelines: # pipeline definition

  - name: incoming_webhook_RBS_pipe
    steps:
      - name: get_rb_path
        type: Bash
        configuration:
          inputResources:
            - name: incoming_webhook_RB_signed_res
          outputResources:
            - name: propertyBag_res
          integrations:
           - name: global_arti
           - name: Arteplus
           
        execution:
            onExecute:
              - echo "$res_incoming_webhook_RB_signed_res_payload" | jq '.' > payload.json
              - rb_name=$(read_json payload.json 'data.release_bundle_name')
              #- echo $rb_name
              - rb_ver=$(read_json payload.json 'data.release_bundle_version')
              #- echo $rb_ver
              #- downloadfile="release-bundles/${rb_name}/${rb_ver}"
              #- echo $downloadfile
              - artiserver=$(read_json payload.json 'jpd_origin')  
              #- echo $artiserver
              - rest_get="${artiserver}/distribution/api/v1/release_bundle/${rb_name}/${rb_ver}"
              #- echo $rest_get
              - rest_auth="${int_global_arti_user}:${int_global_arti_apikey}"
              - echo $rest_auth  
              - write_output propertyBag_res rb_info_restq=${rest_get}
              - write_output propertyBag_res auth_key=${rest_auth}
                       
      - name: get_bundle_info
        type: Bash
        configuration:
          inputSteps:
          - name: get_rb_path
          inputResources:
          - name: propertyBag_res
          - name: GitRepo_res
          
        execution:
          onExecute:
            - res_path="${res_GitRepo_res_resourcePath}"
            - echo $res_path
            - cd $res_GitRepo_res_resourcePath
            #
            - rest_get="${res_propertyBag_res_rb_info_restq}"
            - rest_auth="${res_propertyBag_res_auth_key}"
            - echo $rb_info_restq
            - echo $rest_auth
            #- tmp1="t1"
            #- tmp2="t2"
            - curl -u $rest_auth "$rest_get"
            - curl -u $rest_auth "$rest_get" | jq '.' > bundle.json
            - curl -u $rest_auth "$rest_get" | jq '.' > bundle.json | cat
            - curl -u $rest_auth "$rest_get" | jq '.' | cat
            #- rb_test=$(read_json bundle.json 'docker.repoName')
            #- echo $rb_test
            #- curl -u $rest_auth "$rest_get" | jq '.artifacts[3].props' > artifacts.json 
            #- rb_test2=$(read_json artifacts.json 'docker.repoName')
            #- echo $rb_test2
            #
            #- sudo apt update 
            #- sudo apt install nodejs=14.18.0 -V
            #- sudo chmod 1777 /tmp
            #- sudo apt-get remove nodejs
            #- curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            #- sudo apt-get install -y nodejs
            #- sudo npm cache clean -f
            #- sudo npm install -g n
            #- sudo n stable
            
            - sudo chmod 1777 /tmp
            - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            - source ~/.nvm/nvm.sh
            - source ~/.bashrc

            #- export NVM_DIR="$HOME/.nvm"
            #- [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            #- [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            - nvm install 14
            - nvm use 14
            - node -v
            #- sudo apt install npm
            - npm install
            - node ./app1.js >> tofile.txt

            - echo "hello world" >> uploadme.txt 
            - aws s3 cp uploadme.txt s3://testS3/uploadme.txt
            - aws s3 ls s3://testS3/

            - cat tofile.txt
            - while read in; do chmod 755 "$in"; done < tofile.txt



            # 1. create bash - done
            # q. docker login -  yarden will check
            # 2. install aws cli, aws configure (with S3 res) - yarden will check
            # 3. copy to bucket - aws s3 cp 
            #aws s3 cp 81b0f486a199e649e1c911500274f8795c4e4028 s3://yardeng-bucket-europe/artifactory/filestore/81/



            #- curl -u $rest_auth "$rest_get" | jq '.' > tmp1
            #- curl -u $rest_auth "$rest_get" | jq '.' | cat
            #- curl -u $rest_auth "$rest_get" | jq '.' | cat > tmp1
            #- echo $tmp1
            #- curl -u $rest_auth "$rest_get" | jq '.docker|.repoName' > tmp2
            #- curl -u $rest_auth "$rest_get" | jq '.docker|.repoName' | cat
            #- echo $stmp2
            
            


           # - path="${res_GitRepo_res_path}"
           # - echo $path
           # - res_path="${res_GitRepo_res_resourcePath}"
           # - echo $res_path

 #     - name: step_fs_test
 #       type: bash
 #       configuration:
 #         inputSteps:
 #           - name: get_bundle_info
 #         inputResources:
 #           - name: FileSpec_res
 #           
 #       execution:
 #         onExecute:
 #           - fs_path="${res_FileSpec_res_resourcePath}"

#    onExecute:
#      - cd $res_src_resourcePath
#      - npm install
#     - mkdir -p testresults && mkdir -p codecoverage
#     - $res_src_resourceP
#
