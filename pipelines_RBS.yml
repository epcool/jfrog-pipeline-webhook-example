template: true   # required for local templates
valuesFilePath: ./values.yml

resources: # resources needed for this pipeline
  - name: GitRepo_res  # SCM integration
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.myRepo.gitProvider }} # SCM integration where the repository is located
      path: {{ .Values.myRepo.path }} # Repository path, including org name/repo name
      branches:
        include: main  # Specifies which branches will trigger dependent steps

  - name: incoming_webhook_RB_signed_res  # webhook integration, when ever RB is signed
    type: IncomingWebhook
    configuration:
      webhookName: incoming_webhook_RB_signed

  - name: propertyBag_res # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      rb_info_restq: ""
      auth_key: ""

  - name: propertyBag_version # properety bag for transfering data between steps
    type: PropertyBag
    configuration:
      version_name: ""

pipelines: # pipeline definition

  - name: incoming_webhook_RBS_pipe
    steps:
      - name: Get_ReleaseBundle_Properties
        type: Bash
        configuration:
          inputResources:
            - name: incoming_webhook_RB_signed_res
          outputResources:
            - name: propertyBag_version
            - name: propertyBag_res
          integrations:
           - name: global_arti
           
        execution:
            onExecute:
              # get RB data from webhook
              - echo "$res_incoming_webhook_RB_signed_res_payload" | jq '.' > payload.json 
              - rb_name=$(read_json payload.json 'data.release_bundle_name') # extract RB name
              - rb_ver=$(read_json payload.json 'data.release_bundle_version') # extract RB version
              - artiserver=$(read_json payload.json 'jpd_origin') # get srtifactory server details 
              # parse REST command to get RB spec
              - rest_get="${artiserver}/distribution/api/v1/release_bundle/${rb_name}/${rb_ver}"
              # parse auth detailes
              - rest_auth="${int_global_arti_user}:${int_global_arti_apikey}"
              # wrtie to propery bag for next pipe step  
              - write_output propertyBag_res rb_info_restq=${rest_get}
              - write_output propertyBag_res auth_key=${rest_auth}
              # wrtie to propery bag for 3rd pipe step 
              - tmp="${rb_name}_${rb_ver}"              
              - ver_name=$(tr '.' '_' <<<"$tmp")
              - write_output propertyBag_version version_name=${ver_name}  
                       
      - name: Get_Version_Spec
        type: Bash
        configuration:
          inputResources:
          - name: propertyBag_res
          integrations:
          - name: global_arti
          
        execution:
          onExecute:
           
            # get ret cmd & auth from bag
            - rest_get="${res_propertyBag_res_rb_info_restq}"
            - rest_auth="${res_propertyBag_res_auth_key}"
            #- echo $rb_info_restq
            #- echo $rest_auth
            
            # get RB spec via REST
            - curl -u $rest_auth "$rest_get" | jq '.' > bundle.json
            #- curl -u $rest_auth "$rest_get" | jq '.' | cat
            
            - ls -lah
            - add_run_files bundle.json my_file
            
      - name: Download_Version_As_Zip
        type: Bash
        configuration:
          inputSteps:
            - name: Get_Version_Spec
          inputResources:
            - name: GitRepo_res
            - name: propertyBag_version
          integrations:
            - name: global_arti
        execution:
          onStart:
            # github path to get app script
            - res_path="${res_GitRepo_res_resourcePath}"
            - echo $res_path
            - cd $res_GitRepo_res_resourcePath

            - restore_run_files my_file bundle.json

            # install npm 14 on node machine
            - sudo chmod 1777 /tmp
            - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
            - source ~/.nvm/nvm.sh
            - source ~/.bashrc
            - nvm install 14
            - nvm use 14
            - node -v
            #- sudo apt install npm
            - npm install
            # parse spec to get docker name & tag
            - node ./app.js
            - node ./app.js >> spec.txt

            - docker images
            - docker login --username $int_global_arti_user --password $int_global_arti_apikey $int_global_arti_url
            - cat spec.txt

            #- x=1; while [ $x -le 5 ] && [ read in ]  ; do echo "Welcome $x times"; $(( x++ )) ; done < spec.txt
            - x=1; while [ $x -le 5 ] ; do read in | ${in} ; $(( x++ )) ; done < spec.txt     


            do ${read in}
            #- x=1; while [ $x -le 5 ] && [ read in ]  ; do echo "Welcome $x times" $(( x++ )) ; done < spec.txt
            #${in}

            #- x=1; while read in; do ${in}  $(( x++ ))  echo "count $x" if [[ $x -le 5 ]]  then  break  fi  ; done < spec.txt

            #- COUNTER=20
            #- until [  $COUNTER -lt 10 ]; do  read in ${in} let $COUNTER-=1  ; done < spec.txt
            #- until [  $COUNTER -lt 10 ]; do  read in ${in}  $(( COUNTER-- ))  ; done < spec.txt
           

            #- while read in; do ${in} ; done < spec.txt
            - ls -lah
     
            # creat zip file with all docker images
            - ver_name="${res_propertyBag_version_version_name}.tgz"
            - tar -czvf ${ver_name} *.tar
            
            - ls -lah
            - echo $ver_name
            - tar -ztvf ${ver_name}
